package ui;

import db.interfaces.DBmanager;
import java.io.BufferedReader;
import java.io.IOException;

import db.jdbc.JDBCmanager;
import pojos.Departamentos;
import pojos.Doctores;
import pojos.Enfermeros;
import pojos.Habitaciones;
import pojos.Pacientes;

import java.io.InputStreamReader;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Logger;

import Generar.GenerarAleatorio;

public class Menu{
	private static DBmanager dbman = new JDBCmanager();
	private static final String[] Identificacion = {"Salir", "Jefe", "Doctor", "Enfermero", "Paciente"};
	private static final String []MENUDOCTOR= {"Salir","Ver Historial Pacientes","Modificar Historial","Ver Citas"};
//	private static final String []MENUENFERMERO= {};
	//private static final String []MENUPACIENTE= {};
	private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	private static final String[] MENUJEFE = {"Salir", "Introducir un elemento","Introducir Muchos elemento","Modificar Informacion"};
	private static final String[] ELEMENTO = {"Salir","Doctor","Enfermero","Paciente"};
	private static final DateTimeFormatter formatterFecha =  DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");
	
	public static void main(String[] args) {
		dbman.connect();
		System.out.println("Bienvenido al men� de nuestro hospital");
		int respuesta=-1;
		do {
			respuesta=mostrarOpciones(Identificacion);
			switch(respuesta) {
			 	case 1 :{mostrarMenuJefe();
			 			break;
			 			}
				case 2: { mostrarMenuDoctor();
						break;
						}
				case 3: { mostarMenuEnfermero();
						break;
						}
				case 4: {mostrarMenuPaciente();
						break;
						}
			}
		}
		while (respuesta!=0);
		dbman.disconnect();
		
	}


	private static void mostrarMenuJefe() {
		System.out.println("Bienvenido al menu jefe");
		int respuesta=-1;
		do {
			respuesta=mostrarOpciones(MENUJEFE);
			switch(respuesta) {
			case 1:{añadirTrabajador();
					break;}
			case 2:{añadirMuchosTrabajadores();
					break;}
			case 3:{//ModificarInformacion();
					break;}
			}
		}while(respuesta!=0);
	}
		
	




	private static void añadirMuchosTrabajadores() {
		try {
			System.out.println("Indique el numero de elementos que quiere añadir:");
			int numero=Integer.parseInt(reader.readLine());
			System.out.println("Que tipo de elemento desea añadir:");
			int respuesta=-1;
			do {
				respuesta=mostrarOpciones(ELEMENTO);
				switch(respuesta) {
				case 1:{añadirMultipleDoctorDb(numero);
					break;}
				case 2:{añadirMultipleEnfermeroDb(numero);
					break;}
				case 3:{añadirMultiplePacienteDb(numero);
					break;}
				}
			}while(respuesta!=0);
	    } catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	private static void añadirMultiplePacienteDb(int numero) {
		for (int i=0;i<numero;i++) {
			dbman.addPaciente(GenerarAleatorio.generarPacienteAleatorio());
		}
	}


	private static void añadirMultipleEnfermeroDb(int numero) {
		for (int i=0;i<numero;i++) {
			dbman.addEnfermero(GenerarAleatorio.generarEnfermeroAleatorio());
		}
		
	}


	private static void añadirMultipleDoctorDb(int numero) {
		for (int i =0;i<numero;i++) {
			dbman.addDoctor(GenerarAleatorio.generarDoctorAleatorio());
		}
		
	}


	private static void añadirTrabajador() {
		System.out.println("Que tipo de elemento desea añadir:");
		int respuesta=-1;
		do {
			respuesta=mostrarOpciones(ELEMENTO);
			switch(respuesta) {
			case 1:{añadirDoctorDb();
					break;}
			case 2:{añadirEnfermeroDb();
					break;}
			case 3:{añadirPacienteDb();
					break;}
			}
		}while(respuesta!=0);
		
	}


	private static void mostrarMenuPaciente() {
		// TODO Auto-generated method stub
		
	}


	private static void mostarMenuEnfermero() {
		// TODO Auto-generated method stub
	}


	private static void mostrarMenuDoctor() {
		System.out.println("Bienvenido al menu de doctores.");
		primeraConexion("Doctor");
		int respuesta=-1;
		do {
			respuesta=mostrarOpciones(MENUDOCTOR);
		}while(respuesta!=0);
	}


	private static void primeraConexion(String ROL) {
		System.out.println("¿Es la primera vez que se conecta? S/N");
		String confirmacion ="";
		do{
			try {
				confirmacion= reader.readLine();
			} catch (IOException e) {
				LOGGER.severe("Error al leer una linea\n" + e.getMessage());
			}
			confirmacion=confirmacion.toUpperCase();
			confirmacion=confirmacion.trim();
		}while(confirmacion!="S"||confirmacion!="N");
		if ("S".equals(confirmacion)) {
			if ("Doctor".equals(ROL)) {añadirDoctorDb();}
			else if ("Enfermero".equals(ROL)) {añadirEnfermeroDb();}
			else añadirPacienteDb();
		}
		
	}


	private static void añadirPacienteDb() {
		try {
			System.out.println("Indique el nombre del paciente:");
			String nombre = reader.readLine();
			System.out.println("Indique edad:");
			int edad = Integer.parseInt(reader.readLine());
			System.out.println("Indique el sexo: True para Hombre, False para Mujer");
			boolean sexo =Boolean.parseBoolean(reader.readLine());
			System.out.println("Indique el motivo de ingreso:");
			String motivo = reader.readLine();//comprobar que no sea NULL
			System.out.println("Indique la fecha (DD-MM-AAAA HH:MM):");
			Date fecha = Date.valueOf(LocalDate.parse(reader.readLine(), formatterFecha));
	        System.out.println("Indique el id del doctor que lo trata:");
	        int idDoctor= Integer.parseInt(reader.readLine());
	        Doctores doctor = new Doctores();
	        doctor.setId(idDoctor);
	        System.out.println("Indique el id de la habitacion en la que se encuentra:");
	        int idHabitacion= Integer.parseInt(reader.readLine());
	        Habitaciones habitacion = new Habitaciones();
	        habitacion.setId(idHabitacion);
	        Pacientes paciente = new Pacientes(nombre,edad,sexo,motivo,fecha,doctor,habitacion);
	        dbman.addPaciente(paciente);
		}catch(IOException e) {
			LOGGER.severe("Error al leer una linea\n" + e.getMessage());
		}
	}


	private static void añadirEnfermeroDb() {
		try {
			System.out.println("Indique el nombre del enfermero:");
			String nombre = reader.readLine();
			System.out.println("Indique edad:");
			int edad = Integer.parseInt(reader.readLine());
			Enfermeros enfermero = new Enfermeros(nombre, edad);
			dbman.addEnfermero(enfermero);
		}catch(IOException e) {
			LOGGER.severe("Error al leer una linea\n" + e.getMessage());
		}
		
	}


	private static void añadirDoctorDb() {
		try {
			System.out.println("Indique el nombre del Doctor:");
			String nombre = reader.readLine();
			System.out.println("Indique el numero de colegiado (Deberia ser algo como 2828XXXXX):");
			int numColegiado = Integer.parseInt(reader.readLine());
			System.out.println("Indique edad:");
			int edad = Integer.parseInt(reader.readLine());
			System.out.println("Indique el sexo: True para Hombre, False para Mujer");
			boolean sexo =Boolean.parseBoolean(reader.readLine());
			System.out.println("Indique id del departamento");
			int idDepartamento = Integer.parseInt(reader.readLine());
			Departamentos depar = new Departamentos();
			depar.setId(idDepartamento);
			Doctores doctor = new Doctores(nombre,numColegiado, edad, sexo, depar);
			dbman.addDoctor(doctor);
			System.out.println("Doctor añadido con exito");
		} catch (IOException e) {
			LOGGER.severe("Error al leer una linea\n" + e.getMessage());
		}
		
	}





	private static int mostrarOpciones(String[] opciones) {
		int respuesta=-1;
		do {
			System.out.println("\nElija una opcion:");
			for(int i = 1; i< opciones.length;i++) {
				System.out.println(i +". " + opciones[i]);
			}
			System.out.println("0. " + opciones[0]);
			try {
				respuesta = Integer.parseInt(reader.readLine());
			} catch (IOException e) {
				LOGGER.severe("Error al leer una l�nea\n" + e.getMessage());
			} catch (NumberFormatException e) {
				
			}
		}while(respuesta<0 ||respuesta>= opciones.length);
		return respuesta;
	}



}
